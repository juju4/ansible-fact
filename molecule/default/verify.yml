---
# This is an example playbook to execute Ansible tests.

- name: Verify
  hosts: facthosts
  gather_facts: false
  vars:
    fact_url: https://localhost
  tasks:
    - name: Check if needed pip packages are installed
      command: "pip freeze"
      changed_when: false
      register: pip

    - name: Validate pip packages
      assert:
        that: "item in pip.stdout"
      with_items:
        - distro

    - name: Ensure main.cfg is present
      stat:
        path: /var/_fact/FACT_core/src/config/main.cfg
      register: cfg
    - name: Validate config present
      assert:
        that: cfg.stat.exists and cfg.stat.size != 0

    - name: Ensure clamd socket is present
      stat:
        path: /var/run/clamav/clamd.ctl
      register: ctl
    - name: Validate clamd socket present
      assert:
        that: ctl.stat.exists and ctl.stat.issock

    - name: Ensure python3 process is running
      command: pgrep -u _fact python3
      register: ps
      changed_when: false
      failed_when: false
    - name: Validate ps output
      assert:
        that: ps.stdout
      failed_when: false
    - name: Ensure uwsgi process is running
      command: pgrep -u _fact uwsgi
      register: ps2
      changed_when: false
      failed_when: false
    - name: Validate ps output
      assert:
        that: ps2.stdout
    - name: Ensure ports are listening
      wait_for:
        host: "{{ item.h }}"
        port: "{{ item.p }}"
        timeout: 10
      with_items:
        - { h: localhost, p: 443 }
        # fact
        - { h: localhost, p: 5000 }
        # mongodb custom
        - { h: localhost, p: 27018 }

    - name: Fetch localhost:9191 endpoint
      uri:
        url: "{{ fact_url }}:9191"
        validate_certs: no
        return_content: yes
      register: web1
      failed_when: false
    - name: Validate localhost:9191 endpoint
      assert:
        that: >
          "'sockets' in web1.content and 'workers' in web1.content"
      when: False
    - name: Debug | web1
      debug: var=web1

    - name: Fetch localhost endpoint
      uri:
        url: "{{ fact_url }}"
        validate_certs: no
        return_content: yes
      register: web2
    - name: Validate localhost:9191 endpoint
      assert:
        that: >
          "'<title>FACT</title>' in web2.content and '<h4 class=\"card-title mb-3\">Latest Firmware Submissions</h4>' in web2.content"
    - name: Debug | web2
      debug: var=web2

    - name: Fetch localhost:5000 endpoint
      uri:
        url: "{{ fact_url }}:5000"
        validate_certs: no
        return_content: yes
      register: web3
      failed_when: false
    - name: Validate localhost:5000 endpoint
      assert:
        that: >
          "'<title>FACT</title>' in web3.content and '<h4 class=\"card-title mb-3\">Latest Firmware Submissions</h4>' in web3.content"
      when: false
    - name: Debug | web3
      debug: var=web3

    - name: Fetch localhost:5000/system_health endpoint
      uri:
        url: "{{ fact_url }}:5000/system_health"
        validate_certs: no
        return_content: yes
      register: web4
      failed_when: false
    - name: Validate localhost:5000/system_health endpoint
      assert:
        that: >
          "'<h5 class=\"card-title\">frontend status</h5>' in web4.content and '<h5 class=\"card-title\">backend status</h5>' in web4.content"
      when: false
    - name: Debug | web4
      debug: var=web4

    - name: Fetch localhost/system_health endpoint
      uri:
        url: "{{ fact_url }}/system_health"
        validate_certs: no
        return_content: yes
      register: web4b
    - name: Validate localhost/system_health endpoint
      assert:
        that: >
          "'<h5 class=\"card-title\">frontend status</h5>' in web4b.content and '<h5 class=\"card-title\">backend status</h5>' in web4b.content"
    - name: Debug | web4b
      debug: var=web4b

    - name: Query firmware in database
      uri:
        url: "{{ fact_url }}/rest/firmware"
        validate_certs: no
        return_content: yes
      register: rest1
      failed_when: false
    - name: Validate rest1
      assert:
        that: >
          "'request' in rest1.content and 'request_resource' in rest1.content"
    - name: Debug | rest1
      debug: var=rest1 verbosity=1

    # https://github.com/fkie-cad/FACT_core/wiki/Rest-API
    - name: Submit test firmware
      uri:
        url: "{{ fact_url }}/rest/firmware"
        method: PUT
        body: >
          {"vendor": "AVM", "device_class": "Router", "device_part": "Unknown", "file_name": "rest_test.txt", "version": "0.1", "requested_analysis_systems": ["file_type", "file_hashes"], "binary": "dGVzdDEyMzQgdGhpcyBpcyBzb21lIHRlc3QgZmlsZQ==", "device_name": "rest_test", "firmware_version": "1", "release_date": "2011-01-01", "tags": "tag1,tag2"}
        headers:
          Content-Type: application/json
        validate_certs: no
        return_content: yes
      register: rest2
      failed_when: false
    - name: Validate rest2
      assert:
        that: >
          "'request' in rest2.content and 'request_resource' in rest2.content"
    - name: Debug | rest2
      debug: var=rest2 verbosity=1

    - name: Download Damn Vulnerable Router Firmware
      get_url:
        url: https://github.com/praetorian-inc/DVRF/blob/master/Firmware/DVRF_v03.bin?raw=true
        dest: /tmp/DVRF_v03.bin
        mode: '0600'
        checksum: 'sha256:1a3442c85f589f85b922a2b7b22c46d2e3844a3f729cc4ed432138c0f7abc046'
    - name: Set Damn Vulnerable Router Firmware REST json input
      copy:
        src: firmware-submit.json
        dest: /tmp/firmware-submit.json
        mode: '0600'
    - name: Convert bin to base64
      shell: >
        (echo -n '"binary": "'; base64 -w 0 /tmp/DVRF_v03.bin; echo '"') > /tmp/DVRF_v03.bin.base64
      args:
        creates: /tmp/DVRF_v03.bin.base64
    # jq --argjson base64_data "$(</tmp/DVRF_v03.bin.base64)" '.[].binary = $base64_data' /tmp/firmware-submit.json
    #     => FIXME! /usr/bin/jq: Argument list too long
    # jq '.binary = base64' /tmp/firmware-submit.json --slurpfile base64 /tmp/DVRF_v03.bin.base64 > /tmp/firmware-submit2.json
    #     => jq: Bad JSON in --slurpfile base64 /tmp/DVRF_v03.bin.base64: Invalid numeric literal at EOF at line 1, column 10339672
    - name: Insert base64 in json  # noqa command-instead-of-module
      shell: sed '/}/e cat /tmp/DVRF_v03.bin.base64' /tmp/firmware-submit.json > /tmp/firmware-submit2.json
      args:
        creates: /tmp/firmware-submit2.json
    - name: Submit test firmware from FACT server  # noqa command-instead-of-module no-changed-when
      command: >
        curl -k {{ fact_url }}/rest/firmware -X PUT -H "Content-Type: application/json" -d @/tmp/firmware-submit2.json
      register: rest2b
      failed_when: false
    - name: Validate rest2b
      assert:
        that: >
          "'request' in rest2b.content and 'request_resource' in rest2b.content"
    - name: Debug | rest2b
      debug: var=rest2b verbosity=1

    - name: Query FACT status
      uri:
        url: "{{ fact_url }}/rest/status"
        validate_certs: no
        return_content: yes
      register: rest3
      failed_when: false
    - name: Validate rest3
      assert:
        that: >
          "'system_status' in rest3.content and 'request_resource' in rest3.content"
    - name: Debug | rest3
      debug: var=rest3 verbosity=1

    - name: Fetch content of /var/log/fact/fact_main.log
      slurp:
        src: /var/log/fact/fact_main.log
      register: log1
      become: yes
    # FIXME/BUG: not validating correctly
    - name: Validate /var/log/fact/fact_main.log
      assert:
        that: >
          "'ERROR' not in (log1['content'] | b64decode) and
          'WARNING' not in (log1['content'] | b64decode)"

    - name: Fetch content of /var/log/fact/fact_mongo.log
      slurp:
        src: /var/log/fact/fact_mongo.log
      register: log2
      become: yes
    - name: Validate /var/log/fact/fact_mongo.log
      assert:
        that: >
          "'MongoDB starting :' in log2['content'] | b64decode and
          'Permission denied' not in log2['content'] | b64decode"

    - name: Get /tmp properties
      stat:
        path: /tmp
      register: tmp
    - name: Validate /tmp
      assert:
        that: >
          tmp.stat.exists and tmp.stat.isdir and tmp.stat.mode == '1777'
